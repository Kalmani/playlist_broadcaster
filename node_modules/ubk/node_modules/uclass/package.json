{
  "name": "uclass",
  "version": "2.0.7",
  "description": "uclass is a micro class that mimic mootools' base Class.js & Class.Mutator.Bind syntax, without the inheritence stack. There is no runtime overload as this is just a syntax wrapper around javascript native Prototype.\r Feel free to switch to a proper framework (e.g. mootools :)  anytime after.",
  "main": "uClass.js",
  "scripts": {
    "test": "node node_modules/istanbul/lib/cli.js  cover node_modules/mocha/bin/_mocha test/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/131/uclass.git"
  },
  "keywords": [
    "mootools",
    "prime"
  ],
  "author": {
    "name": "Francois Leurent",
    "email": "131.js@cloudyks.org"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/131/uclass/issues"
  },
  "homepage": "https://github.com/131/uclass",
  "dependencies": {
    "mout": "^0.11.0"
  },
  "devDependencies": {
    "expect.js": "^0.3.1",
    "istanbul": "^0.3.18",
    "mocha": "^2.2.5"
  },
  "readme": "# Motivation\r\n\r\nuclass is a micro class that mimic mootools' base Class.js & Class.Mutator.Bind syntax, with prime's inheritance stack (as in, explicit parent binding). There is no runtime overload as this is just a syntax wrapper around javascript native Prototype.\r\n\r\n* As in prime, uclass use mout for javascript utilities.\r\n* As in primish, uclass keep the old \"Extends\" & \"Implements\" design/syntax.\r\n\r\n\r\n# Example\r\n\r\n```\r\nvar Class  = require('uclass');\r\nvar statik = require('uclass/static');\r\n\r\nvar Ball = new Class({\r\n Binds:['step'], //force \r\n  \r\n color :'red',\r\n direction:[0,0],\r\n radius:0,\r\n position:[0,0],\r\n \r\n initialize: function(radius, direction){\r\n   this.radius = radius || 10;\r\n   this.direction = direction || [Math.random()*10, Math.random()*10];\r\n },\r\n \r\n step:function(){\r\n  this.position[0] += this.direction[0];\r\n  this.position[1] += this.direction[1];\r\n },\r\n\r\n\r\n generate : statik( function(radius, position){\r\n    return new Ball(radius, position);\r\n } ),\r\n\r\n});\r\n\r\nvar ball = new Ball(12);\r\n\r\n```\r\n\r\n\r\n# Api/mixin\r\nUsing Implements : [list of traits] you can add method to your class prototype using any native object\r\n```\r\nImplements : [\r\n  require('events').EventEmitter, //for node\r\n  require('uclass/events'),       //for the browser\r\n  require('uclass/options'),      //add setOptions (merge(this.options))\r\n  require('uclass/static'),       //declare a static member\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n\r\n#License\r\nMIT License style, please distribute & credit me somewhere.\r\n",
  "readmeFilename": "README.md",
  "_id": "uclass@2.0.7",
  "_from": "uclass@>=2.0.5 <3.0.0"
}
